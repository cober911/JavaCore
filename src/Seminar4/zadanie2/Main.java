package Seminar4.zadanie2;

import java.util.ArrayList;

/**
 *  Класс «Эмуляция интернет-магазина».
 * 1. Написать классы покупатель (ФИО, возраст, телефон), товар (название, цена) и
 * заказ (объект покупатель, объект товар, целочисленное количество).
 * 2. Создать массив покупателей (инициализировать 2 элемента), массив товаров
 * (инициализировать 5 элементов) и массив заказов (пустой на 5 элементов).
 * 3. Создать статический метод «совершить покупку» со строковыми параметрами,
 * соответствующими полям объекта заказа. Метод должен вернуть объект заказа.
 * 4. Если в метод передан несуществующий покупатель – метод должен выбросить
 * исключение CustomerException, если передан несуществующий товар, метод
 * должен выбросить исключение ProductException, если было передано отри-
 * цательное или слишком больше значение количества (например, 100), метод
 * должен выбросить исключение AmountException.
 * 5. Вызвать метод совершения покупки несколько раз таким образом, чтобы запол-
 * нить массив покупок возвращаемыми значениями. Обработать исключения сле-
 * дующим образом (в заданном порядке):
 * – если был передан неверный товар – вывести в консоль сообщение об ошиб-
 * ке, не совершать данную покупку;
 * – если было передано неверное количество – купить товар в количестве 1;
 * – если был передан неверный пользователь – завершить работу приложения
 * с исключением.
 * 6. Вывести в консоль итоговое количество совершённых покупок после выполне-
 * ния основного кода приложения.
 */
public class Main {
    public static void main(String[] args) throws exceeption.ClientException, exceeption.ProductException {
        try {
            ArrayList<Client> clients = Client.generationClients(2);
            ArrayList<Product> products = Product.generationItems(2);

            // Создание заказов для каждого клиента
            for (Client client : clients) {
                System.out.printf("Создание заказов для клиента: %s%n", client.getFirstName());
                for (Product product : products) {
                    Order order = Order.makeBuy(client.getFirstName(), client.getAge(), client.getPhone(), product.getProductName(), product.getProductCost(), 2);
                    // Вывод информации о заказе
                    System.out.println("Создан заказ:");
                    System.out.println(order);
                }
                System.out.println(); // Добавим пустую строку для разделения заказов каждого клиента
            }
        } catch (exceeption.ClientException | exceeption.ProductException e) {
            e.printStackTrace();
        }
    }
}
